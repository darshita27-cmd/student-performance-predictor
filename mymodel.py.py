# -*- coding: utf-8 -*-
"""mymodel.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18UNJXoN9wiK5S82CdB-R1iQQV2F_hAZ0
"""

pip install streamlit

import streamlit as st # to create dashboards or frame works
import pandas as pd # datamanipulation
import numpy as np # numerical calculations
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
import plotly.express as px # for visualizations
def generate_student_data(n_samples=100):
  np.random.seed(42)
  attendance=np.random.uniform(50,100,n_samples)
  test_scores=np.random.uniform(0,100,n_samples)
  final_grade=(attendance * 0.4 + test_scores *0.6)
  np.random.normal(0,5,n_samples)
  return pd.DataFrame({'attendance' : attendance, 'test_scores' : test_scores, 'final_grade' : final_grade})
def train_model():
    df = generate_student_data()
    X = df[['attendance', 'test_scores']]
    y = df['final_grade']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    model.fit(X_train, y_train)
    return model
def main():
    st.title('ðŸŽ“ Student Performance Predictor')
    st.write('Introduce attendance and test scores to predict the final grade')
    model = train_model()
    attendance = st.number_input('Attendance (%)', min_value=0, max_value=100, value=75)
    test_scores = st.number_input('Test Scores (%)', min_value=0, max_value=100, value=70)
    if st.button('Predict grade'):
        prediction = model.predict([[attendance, test_scores]])
        st.success(f'Estimated final grade: {prediction[0]:,.2f}%')
        df = generate_student_data()
        fig = px.scatter_3d(df, x='attendance', y='test_scores', z='final_grade',
                           title='Attendance vs Test Scores vs Final Grade')
        fig.add_scatter3d(x=[attendance], y=[test_scores], z=[prediction[0]],
                         mode='markers',
                         marker=dict(size=5, color='red'),
                         name='Prediction')
        st.plotly_chart(fig)
if __name__ == '__main__':
    main()